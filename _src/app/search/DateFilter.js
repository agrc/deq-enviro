define([
    'dojo/text!./templates/DateFilter.html',

    'dojo/_base/declare',
    'dojo/_base/lang',
    'dojo/string',
    'dojo/on',

    'dijit/_WidgetBase',
    'dijit/_TemplatedMixin',
    'dijit/_WidgetsInTemplateMixin',

    'datepicker'
], function (
    template,

    declare,
    lang,
    dojoString,
    on,

    _WidgetBase,
    _TemplatedMixin,
    _WidgetsInTemplateMixin
) {
    return declare([_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {
        // description:
        //      Filter a field by from and to dates

        templateString: template,
        baseClass: 'date-filter',
        widgetsInTemplate: true,

        // fieldAlias: String
        fieldAlias: null,

        // fieldName: String
        fieldName: null,


        // Properties to be sent into constructor

        // filterTxt: String
        filterTxt: null,

        constructor: function (params) {
            // summary:
            //      description
            // params: Object
            console.log('app/search/DateFilter:constructor', arguments);

            this.fieldAlias = /\((.+)\)/.exec(params.filterTxt)[1];
            this.fieldName = /(.+)\s\(/.exec(params.filterTxt)[1];
        },
        postCreate: function () {
            // summary:
            //      description
            console.log('app/search/DateFilter:postCreate', arguments);
        },
        listenForChange: function (evt) {
            // summary:
            //      this silliness is because the jquery on event handler does not
            //      persist after the popover has been hidden and I couldn't get the
            //      data-dojo-attach-event change handler to work at all
            console.log('app/search/DateFilter:listenForChange', arguments);

            var that = this;
            $(evt.target).datepicker().on('changeDate', function () {
                that.onChange();
                $(evt.target).datepicker().off('changeDate');
            });
        },
        isValid: function () {
            // summary:
            //      enabled button if valid
            console.log('app/search/DateFilter:isValid', arguments);

            const validLength = 10;

            return this.from.value.length === validLength &&
                this.to.value.length === validLength;
        },
        onChange: function () {
            // summary:
            //      fires when a date is changed
            console.log('app/search/DateFilter:onChange', arguments);
        },
        getQuery: function () {
            // summary:
            //      returns the query def generated by this widget
            console.log('app/search/DateFilter:getQuery', arguments);

            var getDateString = function (input) {
                var dt = $(input).datepicker('getDate');

                return dt.getFullYear() + '-' + (dt.getMonth() + 1) + '-' + dt.getDate();
            };

            return dojoString.substitute('${fld} >= date \'${from}\' AND ${fld} <= date \'${to}\'',
                {
                    fld: this.fieldName,
                    from: getDateString(this.from),
                    to: getDateString(this.to)
                }
            );
        },
        clear: function () {
            // summary:
            //      clears inputs
            console.log('app/DateFilter:clear', arguments);

            $(this.from).datepicker('update', '');
            $(this.to).datepicker('update', '');
            this.onChange();
        }
    });
});
